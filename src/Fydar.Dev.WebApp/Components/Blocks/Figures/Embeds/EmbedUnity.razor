<div class="embed loading" style="--loading-percentage: 0%;" id="@UnityContainer" @attributes="AdditionalAttributes">
    <canvas class="embed-canvas" id="@UnityCanvas" width=960 height=600 tabindex="-1"></canvas>
    <div class="embed-placeholder">
        @Placeholder
        <div class="progress">
            <div class="progress-bar" style="width: var(--loading-percentage);"></div>
        </div>
    </div>
    <div class="embed-warning" id="@UnityWarning"></div>
</div>

@Configuration

<script>
    var container = document.querySelector("#@UnityContainer");
    var canvas = document.querySelector("#@UnityCanvas");
    var warningBanner = document.querySelector("#@UnityWarning");

    function unityShowBanner(msg, type) {
        function updateBannerVisibility() {
            warningBanner.style.display = warningBanner.children.length ? 'block' : 'none';
        }
        var div = document.createElement('div');
        div.innerHTML = msg;
        warningBanner.appendChild(div);
        if (type == 'error') {
            div.style = 'background: red; padding: 10px;';
        } else {
            if (type == 'warning') div.style = 'background: yellow; padding: 10px;';
            setTimeout(function () {
                warningBanner.removeChild(div);
                updateBannerVisibility();
            }, 5000);
        }
        updateBannerVisibility();
    }

    config.showBanner = unityShowBanner;

    var script = document.createElement("script");
    script.src = loaderUrl;
    script.setAttribute("async", "");
    script.onload = () => {
        setTimeout(function () {
            createUnityInstance(canvas, config, (progress) => {
                container.style.setProperty('--loading-percentage', 100 * progress + "%");
            }).then((unityInstance) => {
                container.style.setProperty('--loading-percentage', "100%");
                container.classList.remove("loading");
            }).catch((message) => {
                alert(message);
            });
        }, 1);
    };
    document.body.appendChild(script);
</script>

<style>
    .embed {
        position: relative;
    }

        .embed div.embed-placeholder {
            display: flex;
            flex-direction: column;
            position: absolute;
            width: 100%;
            height: 100%;
            align-items: center;
            place-content: center;
            overflow: hidden;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.5s;
        }

            .embed div.embed-placeholder .progress {
                width: 300px;
                max-width: 90%;
                height: 18px;
                border-radius: 6px;
                overflow: hidden;
                background-color: #ffffff1c;
            }

                .embed div.embed-placeholder .progress .progress-bar {
                    width: 0%;
                    height: 100%;
                    background-image: linear-gradient(45deg, rgba(22, 23, 24, 0.15) 25%, rgba(0, 0, 0, 0) 25%, rgba(0, 0, 0, 0) 50%, rgba(22, 23, 24, 0.15) 50%, rgba(22, 23, 24, 0.15) 75%, rgba(0, 0, 0, 0) 75%, rgba(0, 0, 0, 0));
                    background-size: 18px 18px;
                    background-color: #0248b0;
                    transition: width 0.25s linear;
                    animation: 1s linear infinite progress-bar-stripes;
                }


        .embed.loading div.embed-placeholder {
            opacity: 1;
        }

        .embed canvas.embed-canvas {
            position: absolute;
            width: 100%;
            height: 100%;
            background: #12171a;
        }

        .embed div.embed-warning {
        }

    @@keyframes progress-bar-stripes {
        from {
            background-position: 18px 0;
        }

        to {
            background-position: 0 0;
        }
    }
</style>

@code {
    public string UnityContainer { get; set; } = "unitycontainer";
    public string UnityCanvas { get; set; } = "unitycanvas";
    public string UnityWarning { get; set; } = "unitywarning";

    [Parameter]
    public RenderFragment? Configuration { get; set; }

    [Parameter]
    public RenderFragment? Placeholder { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }
}
