<a @attributes="AdditionalAttributes" class="card pointer-relative" style="aspect-ratio:@AspectRatio">

    @FeaturedImage

    <div class="card-border-subtle"></div>
    <div class="card-border-secondary"></div>
    <div class="card-hover">
        @if (Signed)
        {
            <div class="card-signed"></div>
        }
        <div class="card-outerglow">
            <div class="card-outerglow-tl"></div>
            <div class="card-outerglow-t"></div>
            <div class="card-outerglow-tr"></div>
            <div class="card-outerglow-ml"></div>
            <div class="card-outerglow-mr"></div>
            <div class="card-outerglow-bl"></div>
            <div class="card-outerglow-b"></div>
            <div class="card-outerglow-br"></div>
        </div>
        <div class="card-border-primary"></div>
    </div>

    @ChildContent

</a>

@code {
    [Parameter]
    public RenderFragment? FeaturedImage { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string AspectRatio { get; set; } = string.Empty;

    [Parameter]
    public bool Signed { get; set; } = false;

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }

    [CascadingParameter(Name = "CardGrid")]
    public CardGrid? CardGrid { get; set; }

    protected override void OnParametersSet()
    {
        if (CardGrid != null)
        {
            CardGrid.Register(this);
        }

        base.OnParametersSet();
    }
}
