@layout DefaultLayout
@page "/portfolio/entities"

<HeadContent>
    @{
        var openGraphModel = new OpenGraphModel()
        {
            Title = "Entities - Fydar",
            Description = "A complete entities system.",
            CanonicalUrl = "https://fydar.dev/portfolio/entities",
            Properties = [
                new OpenGraphModelImage()
                {
                    Url = "https://fydar.dev/media/header.webp",
                    Alt = "A portrait of Fydar in an anime art style."
                }
            ]
        };
    }
    <OpenGraphComponent Model="@openGraphModel" />
</HeadContent>

<HeadingScope>
    <aside>
        <section style="position: sticky; top: 64px;">
            <div style="height: 5rem"></div>
            <TableOfContents />
        </section>

    </aside>

    <section class="container">

        <Heading Level="2" Identifier="world">
            <Prefix>Designing the</Prefix>
            <Text>Entity Component System</Text>
            <Content>
                <p>I went about designing my own ECS. Firstly, I laid out my requirements for the ECS.</p>

                <ul>
                    <li>I want it to be <b>hierarchical</b>.</li>
                    <li>I want parent-child relationships to be <b>hard-typed</b>.</li>
                    <li>I want to take advantage of the latest C# APIs to achieve maximum performance.</li>
                    <li>I want to use minimal reflection to ensure maximum linkability and performance.</li>
                </ul>

                <h3>Hard-Typed Relationships</h3>

                <p>I wanted to bring <b>natural object-oriented data structures</b> into the realm of <b>ECS</b>. To do this, I started by introducing Entity Archetypes, which allowed me to specify archetypes of entities that always contain set components. I didn't want to loose the flexibility of a traditional ECS, so I made sparse components an optional feature of the archetypes.</p>

                <p>I then experimented with what it might look like to add parent-child relationships to the archetypes, but found myself blurring the lines between what is an entity and what is a component. It was clear that this wasn't the solution I was looking for, so I continued experimenting.</p>

                <p>Eventually I explored replacing both entities and components with a single entry in the hierarchy: the node. This is somewhat similar to what Godot does, however the hard-typed relationships between parent and children nodes ends with 2D, 3D, and UI nodes. What if I took the hard-typed scene root nodes and brought it to every node in the scene?</p>

            </Content>
        </Heading>

    </section>
</HeadingScope>
